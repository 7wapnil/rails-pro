:queues:
  - default
  - expired_bonuses
  - radar_live_coverage_booking
  - radar_markets_update
  - radar_events_preloading
  - mq
  - mailers
  - exchange_rates
  - expired_entry_requests

:schedule:
  expiring_bonuses:
    every: <%= ENV.fetch('EXPIRING_BONUSES_INTERVAL', '1d') %>
    class: Scheduled::ExpiringBonusesWorker
    queue: expired_bonuses
    enabled: <%= ['production', 'staging'].include?(ENV['RACK_ENV']) %>
    description: "Closes expired bonuses. Bonus expiration defined by deleted state or and time which must less then current time"

  radar_market_templates_update:
    every: <%= ENV.fetch('RADAR_MARKET_TEMPLATES_UPDATE_INTERVAL', '1w') %>
    class: Radar::MarketsUpdateWorker
    enabled: <%= ['production', 'staging'].include?(ENV['RACK_ENV']) %>
    description: "Updates a list of market templates in database"

  unpopular_events_clean_up:
    every: <%= ENV.fetch('UNPOPULAR_EVENTS_CLEAN_UP_INTERVAL', '1h') %>
    class: UnpopularEventsCleanUpWorker
    enabled: <%= ['production', 'staging'].include?(ENV['RACK_ENV']) %>
    description: "Deletes all events that were finished, but have no bets placed"

  customer_lock_table_clean_up:
    every: <%= ENV.fetch('CUSTOMER_LOCK_TABLE_CLEAN_UP_INTERVAL', '1d') %>
    class: CustomerLockTableCleanupWorker
    enabled: <%= ['production', 'staging'].include?(ENV['RACK_ENV']) %>
    description: "Checks for customer lock expiration and unlocks if needed"

  event_archivation:
    every: <%= ENV.fetch('EVENT_ARCHIVATION_INTERVAL', '1d') %>
    class: EventArchivationWorker
    enabled: <%= ['production', 'staging'].include?(ENV['RACK_ENV']) %>
    description: "Creates every event data copies in archivation database"

  radar_events_preloading:
    every: <%= ENV.fetch('RADAR_EVENTS_PROLOADER_INTERVAL', '1d') %>
    class: Radar::ScheduledEvents::EventScheduleLoadingWorker
    enabled: <%= ['production', 'staging'].include?(ENV['RACK_ENV']) %>

  exchange_rates_update:
    every: <%= ENV.fetch('EXCHANGE_RATES_UPDATE_INTERVAL', '1h') %>
    class: Scheduled::ExchangeRatesWorker
    enabled: <%= ['production', 'staging'].include?(ENV['RACK_ENV']) %>
    description: "Queries events that will start in the future and stores them in local database"

  registration_reports_sending:
    cron: '0 5 * * * CET'
    class: Scheduled::RegistrationReportWorker
    enabled: <%= ['production', 'staging'].include?(ENV['RACK_ENV']) %>
    description: "Sends registration reports to FTP server"

  sales_reports_sending:
    cron: '0 5 * * * CET'
    class: Scheduled::SalesReportWorker
    enabled: <%= ['production', 'staging'].include?(ENV['RACK_ENV']) %>
    description: "Sends sales reports to FTP server"

  mts_random_bet_placement:
    every: <%= "#{ENV.fetch('MTS_RANDOM_BET_INTERVAL', 10)}s" %>
    class: Mts::RandomBetPlacementWorker
    enabled: <%= ['production', 'staging'].include?(ENV['RACK_ENV']) %>
    description: "Random bet placement for MTS testing"

  expirining_entry_requests_worker:
    every: <%= ENV.fetch('EXPIRING_ENTRY_REQUESTS_INTERVAL', '1d') %>
    class: Scheduled::ExpiringEntryRequestsWorker
    queue: expired_entry_requests
    enabled: <%= ['production', 'staging'].include?(ENV['RACK_ENV']) %>
    description: "Fails expired deposit requests and connected bonuses"

  expiring_customer_bonus_worker:
    every: <%= ENV.fetch('EXPIRING_ENTRY_REQUESTS_INTERVAL', '1h') %>
    class: Scheduled::ExpiringCustomerBonusesWorker
    enabled: <%= ['production', 'staging'].include?(ENV['RACK_ENV']) %>
    description: "Fails expired deposit requests and connected bonuses"
