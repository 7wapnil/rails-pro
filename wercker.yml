box:
  id: arcanebet/arcanebet
  username: $DOCKERHUB_USERNAME
  password: $DOCKERHUB_PASSWORD
  tag: phraseapp

services:
  - postgres:9.6.16
  - mongo:3.6

build:
  steps:
    - bundle-install
    - bashaus/yarn-install

    - script:
      name: prepare database
      code: bundle exec rake db:test:prepare

    - script:
      name: rubocop
      code: bundle exec rubocop

    - script:
      name: brakeman
      code: bundle exec brakeman -q

    - script:
      name: eslint
      code: yarn run eslint .

    - script:
      name: haml-lint
      code: bundle exec haml-lint --fail-level=warning

    - script:
      name: factorybot factories lint
      code: bundle exec rake factory_bot:lint

    - script:
      name: rspec
      code: bundle exec rspec

  after-steps:
    - slack-notifier:
      url: $SLACK_URL
      notify_on: failed

store:
  steps:
    - script:
      name: bundle-install
      code: bundle install --without development test

    - bashaus/yarn-install

    - script:
      name: compile-assets
      code: bundle exec rake webpacker:compile

    - script:
      name: pull-locale-translations
      code: |
        if [ -z $PHRASEAPP_BRANCH_NAME ]; then \
          phraseapp pull --access-token $PHRASEAPP_ACCESS_TOKEN; \
        else \
          phraseapp pull --branch $PHRASEAPP_BRANCH_NAME --access-token $PHRASEAPP_ACCESS_TOKEN; \
        fi

    - script:
      name: create-artifact
      code: |
        export ARTIFACT=$(date +%Y-%m-%d--%H-%M-%S)
        if [ -e $WERCKER_GIT_COMMIT.txt ]; then rm $WERCKER_GIT_COMMIT.txt; fi
        touch $WERCKER_GIT_COMMIT.txt
        echo $ARTIFACT > $WERCKER_GIT_COMMIT.txt

    - internal/docker-push:
      username: $DOCKERHUB_USERNAME
      password: $DOCKERHUB_PASSWORD
      repository: arcanebet/arcanebet
      tag: $WERCKER_GIT_COMMIT-$ARTIFACT

  after-steps:
    - slack-notifier:
      url: $SLACK_URL
      notify_on: failed

deploy:
  box: python:2.7-alpine

  steps:
    - script:
      name: read-artifact
      code: export ARTIFACT=$(cat $WERCKER_GIT_COMMIT.txt)

    - script:
      name: install-linux-deps
      code: apk add -qU openssh git curl jq

    - capgemini/terraform-install:
      version: "0.11.14"

    - edgecaseadmin/install-aws-cli:
      key: $AWS_ACCESS_KEY_ID
      secret: $AWS_SECRET_ACCESS_KEY
      region: $AWS_DEFAULT_REGION

    - add-ssh-key:
      keyname: GITHUB

    - script:
      name: add-github-to-known-hosts
      code: ssh-keyscan github.com >> /root/.ssh/known_hosts

    - script:
      name: clone-terraform-config
      code: |
        rm -rf $TERRAFORM_CONFIG_DIR
        git clone \
            git@github.com:arcanebet/infrastructure.git \
            $TERRAFORM_CONFIG_DIR

    - script:
      name: update-image-tag
      code: |
        aws ssm put-parameter \
            --name ${TAG_PARAM:-/backend/tag} \
            --value $WERCKER_GIT_COMMIT-$ARTIFACT \
            --type SecureString \
            --overwrite

    - script:
      name: prepare-migrations
      code: |
        cd $TERRAFORM_CONFIG_DIR/terraform/services/backend-web
        terraform init
        terraform workspace select ${TARGET_ENV}
        terraform apply -auto-approve \
            -target module.app.aws_ecs_task_definition.this
        aws ecs describe-task-definition \
            --query 'taskDefinition.containerDefinitions' \
            --task-definition $(terraform output task_definition) > td.json
        jq 'map(select(.name == "backend-web")) | .[].command=["rake","db:migrate"] | .[].cpu=50 | .[].memory=256' \
            td.json > $WERCKER_SOURCE_DIR/migrate.json

    - 1science/aws-ecs:
        key: $AWS_ACCESS_KEY_ID
        secret: $AWS_SECRET_ACCESS_KEY
        region: $AWS_DEFAULT_REGION
        cluster-name: arcanebet
        task-definition-name: ${MIGRATE_DEF:-backend-migrate}
        task-definition-file: $WERCKER_SOURCE_DIR/migrate.json

    - script:
      name: terraform-apply
      code: |
        cd $TERRAFORM_CONFIG_DIR/terraform/services/backend-web
        terraform init
        terraform workspace select ${TARGET_ENV}
        terraform apply -auto-approve

        cd $TERRAFORM_CONFIG_DIR/terraform/services/backend-worker
        terraform init
        terraform workspace select ${TARGET_ENV}
        terraform apply -auto-approve

        cd $TERRAFORM_CONFIG_DIR/terraform/services/backend-feed-worker
        terraform init
        terraform workspace select ${TARGET_ENV}
        terraform apply -auto-approve

        cd $TERRAFORM_CONFIG_DIR/terraform/services/backend-mts-worker
        terraform init
        terraform workspace select $TARGET_ENV
        terraform apply -auto-approve

        cd $TERRAFORM_CONFIG_DIR/terraform/services/backend-mts-consumer
        terraform init
        terraform workspace select $TARGET_ENV
        terraform apply -auto-approve

        cd $TERRAFORM_CONFIG_DIR/terraform/services/backend-websocket
        terraform init
        terraform workspace select ${TARGET_ENV}
        terraform apply -auto-approve

        cd $TERRAFORM_CONFIG_DIR/terraform/services/backend-casino-consumer
        terraform init
        terraform workspace select ${TARGET_ENV}
        terraform apply -auto-approve

        cd $TERRAFORM_CONFIG_DIR/terraform/services/backend-callbacks
        terraform init
        terraform workspace select ${TARGET_ENV}
        terraform apply -auto-approve

  after-steps:
    - script:
      name: deploy-market-appsignal
      code: |
        curl --location --request POST \
        "https://push.appsignal.com/1/markers?api_key=$APPSIGNAL_KEY&name=$APPSIGNAL_NAME&environment=$APPSIGNAL_ENVIRONMENT" \
        --header 'Content-Type: application/json' \
        --data-raw "{
          \"revision\": \"$WERCKER_GIT_COMMIT\",
          \"user\": \"wercker@trigger.com\"
        }"

    - slack-notifier:
      url: $SLACK_URL

deploy-unified-odds-listener:
  box: python:2.7-alpine

  steps:
    - script:
      name: read-artifact
      code: export ARTIFACT=$(cat $WERCKER_GIT_COMMIT.txt)

    - script:
      name: install-linux-deps
      code: apk add -qU openssh git curl jq

    - capgemini/terraform-install:
      version: "0.11.14"

    - edgecaseadmin/install-aws-cli:
      key: $AWS_ACCESS_KEY_ID
      secret: $AWS_SECRET_ACCESS_KEY
      region: $AWS_DEFAULT_REGION

    - add-ssh-key:
      keyname: GITHUB

    - script:
      name: add-github-to-known-hosts
      code: ssh-keyscan github.com >> /root/.ssh/known_hosts

    - script:
      name: clone-terraform-config
      code: |
        rm -rf $TERRAFORM_CONFIG_DIR
        git clone \
            git@github.com:arcanebet/infrastructure.git \
            $TERRAFORM_CONFIG_DIR

    - script:
      name: update-image-tag
      code: |
        aws ssm put-parameter \
            --name /backend/tag \
            --value $WERCKER_GIT_COMMIT-$ARTIFACT \
            --type SecureString \
            --overwrite

    - script:
      name: terraform-apply
      code: |
        cd $TERRAFORM_CONFIG_DIR/terraform/services/backend-feed-consumer
        terraform init
        terraform workspace select ${TARGET_ENV}
        terraform apply -auto-approve


  after-steps:
    - slack-notifier:
      url: $SLACK_URL

perform-rake-task:
  box: python:2.7-alpine

  steps:
    - script:
      name: install-linux-deps
      code: apk add -qU openssh git curl jq

    - capgemini/terraform-install:
      version: "0.11.14"

    - edgecaseadmin/install-aws-cli:
      key: $AWS_ACCESS_KEY_ID
      secret: $AWS_SECRET_ACCESS_KEY
      region: $AWS_DEFAULT_REGION

    - add-ssh-key:
      keyname: GITHUB

    - script:
      name: add-github-to-known-hosts
      code: ssh-keyscan github.com >> /root/.ssh/known_hosts

    - script:
      name: clone-terraform-config
      code: |
        rm -rf $TERRAFORM_CONFIG_DIR
        git clone \
            git@github.com:arcanebet/infrastructure.git \
            $TERRAFORM_CONFIG_DIR

    - script:
      name: define-rake-task
      code: |
        cd $TERRAFORM_CONFIG_DIR/terraform/services/backend-web
        terraform init
        terraform workspace select ${TARGET_ENV}
        terraform apply -auto-approve \
            -target module.app.aws_ecs_task_definition.this
        aws ecs describe-task-definition \
            --query 'taskDefinition.containerDefinitions' \
            --task-definition $(terraform output task_definition) > td.json
        jq 'map(select(.name == "backend-web")) | .[].command=["rake", "'"${RAKE_TASK}"'"] | .[].cpu=50 | .[].memory=256' \
            td.json > $WERCKER_SOURCE_DIR/$TASK_DEFINITION_NAME.json

    - 1science/aws-ecs:
        key: $AWS_ACCESS_KEY_ID
        secret: $AWS_SECRET_ACCESS_KEY
        region: $AWS_DEFAULT_REGION
        cluster-name: arcanebet
        task-definition-name: $TASK_DEFINITION_NAME
        task-definition-file: $WERCKER_SOURCE_DIR/$TASK_DEFINITION_NAME.json
